import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/OptionsMenu.jsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=5e085948"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import * as RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.$RefreshReg$) {
    throw new Error(
      "@vitejs/plugin-react can't detect preamble. Something is wrong."
    );
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = RefreshRuntime.getRefreshReg("C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx");
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$(), _s2 = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=5e085948"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react; const useEffect = __vite__cjsImport3_react["useEffect"]; const useRef = __vite__cjsImport3_react["useRef"]; const useState = __vite__cjsImport3_react["useState"];
export default function OptionsMenu({ style = {} }) {
  _s();
  const [open, setOpen] = useState(false);
  const [toast, setToast] = useState(null);
  const menuRef = useRef(null);
  useEffect(() => {
    const onDoc = (e) => {
      if (menuRef.current && !menuRef.current.contains(e.target)) setOpen(false);
    };
    document.addEventListener("mousedown", onDoc);
    return () => document.removeEventListener("mousedown", onDoc);
  }, []);
  useEffect(() => {
    if (!toast) return;
    const t = setTimeout(() => setToast(null), 2200);
    return () => clearTimeout(t);
  }, [toast]);
  const show = (text, kind = "info") => setToast({ text, kind });
  async function onCheckUpdates() {
    try {
      show("Checking for updates…", "info");
      const current = await window.app?.getVersion?.().catch(() => null);
      const res = await window.app?.checkUpdates?.();
      const status = res?.status || (res?.version ? "available" : "uptodate");
      if (status === "available" && res?.version) {
        show(`Update ${res.version} available — will install on exit.`, "success");
      } else if (status === "uptodate") {
        show(`Up to date${current ? ` (v${current})` : ""}!`, "success");
      } else if (status === "error") {
        show("Update check failed.", "error");
        console.error("[OptionsMenu] checkUpdates error:", res?.message);
      } else {
        show("Up to date!", "success");
      }
    } catch (err) {
      show("Update check failed.", "error");
      console.error("[OptionsMenu] checkUpdates error:", err);
    } finally {
      setOpen(false);
    }
  }
  async function onReloadOCR() {
    try {
      show("Restarting OCR…", "info");
      await window.app?.reloadOCR?.();
      window.dispatchEvent(new CustomEvent("force-live-reconnect", { detail: { reset: true } }));
      show("OCR restarted.", "success");
    } catch (err) {
      show("Failed to restart OCR.", "error");
      console.error("[OptionsMenu] reloadOCR error:", err);
    } finally {
      setOpen(false);
    }
  }
  async function onRefresh() {
    try {
      await window.app?.refreshApp?.();
    } finally {
      setOpen(false);
    }
  }
  const btnStyle = {
    padding: "6px 10px",
    borderRadius: 10,
    border: "1px solid #2a2a2a",
    background: "linear-gradient(180deg,#2b2b2b,#1b1b1b)",
    color: "#eaeaea",
    fontWeight: 700,
    cursor: "pointer",
    boxShadow: "0 4px 16px rgba(0,0,0,.3)"
  };
  const menuStyle = {
    position: "absolute",
    right: 0,
    top: "calc(100% + 6px)",
    minWidth: 220,
    background: "#0e0e0e",
    border: "1px solid #282828",
    borderRadius: 12,
    boxShadow: "0 16px 40px rgba(0,0,0,.45)",
    overflow: "hidden"
  };
  return /* @__PURE__ */ jsxDEV("div", { ref: menuRef, style: { position: "relative", ...style }, children: [
    /* @__PURE__ */ jsxDEV(
      "button",
      {
        style: btnStyle,
        onClick: () => setOpen((v) => !v),
        title: "Options",
        "aria-haspopup": "menu",
        "aria-expanded": open,
        children: "Options ▾"
      },
      void 0,
      false,
      {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 127,
        columnNumber: 7
      },
      this
    ),
    open && /* @__PURE__ */ jsxDEV("div", { style: menuStyle, role: "menu", "aria-label": "Options menu", children: [
      /* @__PURE__ */ jsxDEV(MenuItem, { label: "Check for updates", onClick: onCheckUpdates }, void 0, false, {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 139,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ jsxDEV(Divider, {}, void 0, false, {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 140,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ jsxDEV(MenuItem, { label: "Reload OCR", onClick: onReloadOCR }, void 0, false, {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 141,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ jsxDEV(MenuItem, { label: "Refresh app", onClick: onRefresh }, void 0, false, {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 142,
        columnNumber: 11
      }, this)
    ] }, void 0, true, {
      fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
      lineNumber: 138,
      columnNumber: 7
    }, this),
    toast && /* @__PURE__ */ jsxDEV(
      "div",
      {
        role: "status",
        "aria-live": "polite",
        style: {
          position: "absolute",
          right: 0,
          top: "calc(100% + 54px)",
          padding: "8px 12px",
          background: toast.kind === "error" ? "#5a1a1a" : toast.kind === "success" ? "#1b4a1b" : "#1a1a3a",
          color: "#eee",
          borderRadius: 10,
          border: "1px solid #333",
          boxShadow: "0 8px 28px rgba(0,0,0,.45)",
          maxWidth: 360,
          pointerEvents: "none",
          fontWeight: 700
        },
        children: toast.text
      },
      void 0,
      false,
      {
        fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
        lineNumber: 147,
        columnNumber: 7
      },
      this
    )
  ] }, void 0, true, {
    fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
    lineNumber: 126,
    columnNumber: 5
  }, this);
}
_s(OptionsMenu, "1qaY3Ym8iPS5LV7gBxpmVvYi91Y=");
_c = OptionsMenu;
function MenuItem({ label, onClick }) {
  _s2();
  const [hover, setHover] = useState(false);
  const itemStyle = {
    width: "100%",
    textAlign: "left",
    padding: "10px 12px",
    color: "#ddd",
    background: "transparent",
    border: 0,
    cursor: "pointer",
    fontWeight: 600
  };
  const itemHover = { background: "#1b1b1b" };
  return /* @__PURE__ */ jsxDEV(
    "button",
    {
      role: "menuitem",
      onClick,
      onMouseEnter: () => setHover(true),
      onMouseLeave: () => setHover(false),
      style: { ...itemStyle, ...hover ? itemHover : null },
      children: label
    },
    void 0,
    false,
    {
      fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
      lineNumber: 191,
      columnNumber: 5
    },
    this
  );
}
_s2(MenuItem, "bRXmKus9fOZFlca/6zXTYU+twGY=");
_c2 = MenuItem;
function Divider() {
  return /* @__PURE__ */ jsxDEV("div", { style: { height: 1, background: "#262626" } }, void 0, false, {
    fileName: "C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx",
    lineNumber: 204,
    columnNumber: 10
  }, this);
}
_c3 = Divider;
var _c, _c2, _c3;
$RefreshReg$(_c, "OptionsMenu");
$RefreshReg$(_c2, "MenuItem");
$RefreshReg$(_c3, "Divider");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("C:/dev/pokemmo-tool/src/components/OptionsMenu.jsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,